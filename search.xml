<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>About 00</title>
    <url>/2020/about00/</url>
    <content><![CDATA[<h1 id="Guys-see-you"><a href="#Guys-see-you" class="headerlink" title="Guys, see you!"></a>Guys, see you!</h1><p>不知不觉，我在零零已经度过了一年多的时间，始于巧合的机会，也收获了意外的力量与惊喜，现在到了该说再见的时候。我曾经是个轻微直楞的家伙，但好在大家悉心的开导、善意的提醒，让我学会了怎样把控心态，这也是我在零零最大的收获。洗墨、惜惺、相知曾是我的交友准则，却在这里拥有了志同道合的别样感动。感恩！</p>
<a id="more"></a>
<hr>
<h1 id="公司旁的樱花道儿"><a href="#公司旁的樱花道儿" class="headerlink" title="公司旁的樱花道儿"></a>公司旁的樱花道儿</h1><pre><code>每年初春的时候，都能看到一次樱花，今年疫情的樱花也格外好看。</code></pre><p><a href="https://imgchr.com/i/dK7sAO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/18/dK7sAO.md.jpg" alt="dK7sAO.md.jpg"></a><br><a href="https://imgchr.com/i/dK7yND" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/18/dK7yND.md.jpg" alt="dK7yND.md.jpg"></a></p>
<pre><code>朋友圈没能发出来的32s版（没找到好的视频床，流加载太慢了，见谅）</code></pre><div style="width:100%;height:0px;position:relative;padding-bottom:56.327%;"><iframe src="https://streamja.com/embed/way5y" frameborder="0" width="100%" height="100%" allowfullscreen style="width:100%;height:100%;position:absolute;"></iframe></div>

<hr>
<h1 id="Falcon发布会"><a href="#Falcon发布会" class="headerlink" title="Falcon发布会"></a>Falcon发布会</h1><pre><code>第一次对作品的发布会有了参与感。</code></pre><p><a href="https://imgchr.com/i/dKxWvD" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/18/dKxWvD.md.jpg" alt="dKxWvD.md.jpg"></a><br><a href="https://imgchr.com/i/dKxTUI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/18/dKxTUI.md.jpg" alt="dKxTUI.md.jpg"></a></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>XCTrace实现iOS启动时间自动化</title>
    <url>/2021/XCTrace%E5%AE%9E%E7%8E%B0iOS%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
    <content><![CDATA[<h1 id="有关启动时间"><a href="#有关启动时间" class="headerlink" title="有关启动时间"></a>有关启动时间</h1><p><strong>启动方式</strong></p>
<ul>
<li>冷启动：当应用启动时，后台没有该应用的进程，这时系统会重新创建一个新的进程分配给该应用， 这种启动方式就叫做冷启动。（即后台不存在该应用进程）</li>
<li>热启动：当应用已经被启动后， 后续按下返回键、Home键等回到桌面或者跳转至其他程序时，二次打开该app的方式叫做热启动。（即后台已经存在该应用进程，系统要做的就是将活动再次置于前台） </li>
</ul>
<blockquote>
<p> 参考链接–<a href="https://developer.android.com/topic/performance/vitals/launch-time#cold" target="_blank" rel="noopener">https://developer.android.com/topic/performance/vitals/launch-time#cold</a></p>
</blockquote>
<p><strong>启动时间</strong></p>
<ul>
<li>当前「iOS启动时间」计算的是冷启动时间，在APP首次启动以后拿到初始帧渲染（Initial Frame Rendering）完成的时间点，其间APP启动大致分为以下几个过程：</li>
</ul>
<p><a href="https://imgse.com/i/pkeCoCD" target="_blank" rel="noopener"><img src="https://s21.ax1x.com/2024/05/11/pkeCoCD.webp" alt="pkeCoCD.webp"></a></p>
<hr>
<h1 id="探究过程"><a href="#探究过程" class="headerlink" title="探究过程"></a>探究过程</h1><p><strong>有关iOS启动时间的探究，初始方向有以下几种：</strong></p>
<ul>
<li><p>利用WebDriverAgent工具去实现启动APP的操作，调用系统API去录屏。通过输出视频的前后帧变化来判定是启动完成，从而记录启动时间。</p>
<ul>
<li>优点：对APP重签名、iphone设备的证书没有限制，且适用范围广。</li>
<li>缺点：过程很繁琐，而且依据前后帧不变做判定不是个稳定的条件，开屏过程中可能出现其他前后帧相同的情况。</li>
</ul>
</li>
<li><p>通过埋点来计算启动时间。记录点击APP-icon埋点的触发时间点、APP首页某个组件埋点曝光结束的时间点，再计算时间差作为启动时间。</p>
<ul>
<li>优点：启动时间可信度较高</li>
<li>缺点：依赖开发对APP进行埋点</li>
</ul>
</li>
<li><p>通过Instruments命令行工具计算启动时间。利用Instruments命令行调用APP生成.trace文件，通过开源工程<a href="https://github.com/Qusic/TraceUtility" target="_blank" rel="noopener">TraceUtility</a>对.trace文件进行解析。</p>
<ul>
<li>优点：命令行工具易用性高，且有现有工程可以利用</li>
<li>缺点：输出的.trace文件是二进制格式，只能用可视化Instruments工具查看。想要至为可视化文件，需要TraceUtility工程利用dSYM文件解析对.trace文件进行解析。但TraceUtility实质是个iOS工程，调用了Instruments部分私有API，仅对Xcode 10.0以下版本支持。</li>
</ul>
</li>
<li><p>通过XCTrace命令行工具计算启动时间。</p>
<ul>
<li>优点： 同是命令行工具，相比较Instruments工具，可输出可视化的文件格式</li>
<li>缺点： 需要UDID在开发者账号下的iphone和开发者证书的包，且开发者账号与开发者证书要一致（即所属budleID要一致）。</li>
</ul>
</li>
</ul>
<p><strong>XCTrace探究过程</strong></p>
<ul>
<li><p>XCTrace生成.trace文件shell命令<br><code>xcrun xctrace record --template &#39;App Launch&#39; --device  &#39;对应的deciceID&#39; --output ~/Downloads/test.trace --launch XXXX.app&#39;</code><br>该命令中–template参数为想要记录的模版，为了计算启动时间我选择的是’App Launch’。–device参数为Iphone的UDID，当然也可以选择Iphone的设备名称。</p>
</li>
<li><p>对.trace文件进行解析，拿到对应的记录结构。<br><code>xcrun xctrace export --input ~/Downloads/test.trace --toc</code><br><a href="https://imgse.com/i/pkeC7gH" target="_blank" rel="noopener"><img src="https://s21.ax1x.com/2024/05/11/pkeC7gH.webp" alt="pkeC7gH.webp"></a></p>
</li>
</ul>
<p>该步骤是为了拿到.trace文件中记录了哪些schema名（可以简单理解成.trace将所有数据以很多张表的形式进行记录，输出的schema就是每张表的名称），作为想要可视化的xpath输入。</p>
<ul>
<li><p>XCTrace解析.trace文件，输出可视化。<br><code>xcrun xctrace export --input ~/Downloads/test.trace --xpath &#39;/trace-toc/run[@number=&quot;1&quot;]/data/table[@schema=&quot;life-cycle-period&quot;]&#39; &gt;&gt; test.xml</code><br>该步骤的schema即是上一步拿到的模式名，我选取的是’life-cycle-period’。</p>
</li>
<li><p>XML文件分析及取值。<br>先用Instruments桌面端工具将记录的.trace文件打开。<br><a href="https://imgse.com/i/pkeCT8e" target="_blank" rel="noopener"><img src="https://s21.ax1x.com/2024/05/11/pkeCT8e.webp" alt="pkeCT8e.webp"></a></p>
</li>
</ul>
<p>观察发现在’Initial Frame Rendering’和’Running in the foreground’进程间有段空置时间，因此不能拿取’Running in the foreground’的开始时间，而是拿取’Initial Frame Rendering’的完成时间。<br><a href="https://imgse.com/i/pkeC54O" target="_blank" rel="noopener"><img src="https://s21.ax1x.com/2024/05/11/pkeC54O.webp" alt="pkeC54O.webp"></a><br>只需要将该进程的开始时间’start-time’及’duration’相加即可。</p>
<hr>
<h1 id="待改进点"><a href="#待改进点" class="headerlink" title="待改进点"></a>待改进点</h1><ol>
<li><p>由于苹果爸爸的权限管控，目前只能运用于未重签名的包</p>
</li>
<li><p>当前只是冷启动的时间，热启动时间还未拿到。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title>About Me</title>
    <url>/2020/aboutMe/</url>
    <content><![CDATA[<p><big>姓名：郑智</big><br><big>现居：杭州</big><br><big>GitHub：<a href="https://github.com/Xxxxxzh1" target="_blank" rel="noopener">Xxxxxzh1</a></big><br><big>微信：Xxxxxzh1-</big></p>
<a id="more"></a>
<img src="https://s21.ax1x.com/2024/05/11/pkePwMd.jpg" width="50%">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>团队协作规范</title>
    <url>/2024/%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p><code>针对迭代流程整理可行性规范，让各角色配合更机敏，在保障质量的同时，达到从容发布的效果。</code></p>
<h1 id="迭代流转图"><a href="#迭代流转图" class="headerlink" title="迭代流转图"></a>迭代流转图</h1><p><a href="https://imgse.com/i/pkeCG9g" target="_blank" rel="noopener"><img src="https://s21.ax1x.com/2024/05/11/pkeCG9g.png" alt="pkeCG9g.png"></a><br><code>关键流转点：需求稿评审、视觉稿交付</code></p>
<hr>
<h1 id="技术侧流程事项"><a href="#技术侧流程事项" class="headerlink" title="技术侧流程事项"></a>技术侧流程事项</h1><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><ul>
<li>技术方案评审需在介入开发前进行，由技术负责人拉齐</li>
<li>对于多端需求预留合理的联调时间</li>
<li>各端负责人建立对应版本，并将迭代需求拆分至各版本</li>
</ul>
<h2 id="提测流程"><a href="#提测流程" class="headerlink" title="提测流程"></a>提测流程</h2><ul>
<li>QA需在提测日前一天派发冒烟案例至Task维度，预留1d的时间给开发冒烟</li>
<li>提测日开发确认案例评审结果– 冒烟测试 – 走提测单至对应QA</li>
<li>提测单晚于任务对应的提测日期，算做延期提测，影响Skynet团队质量分</li>
<li>各端提测需在同一分支、同一环境，及早识别不同需求代码间的影响：</li>
<li>服务端应用需提前将代码合并至同一分支（如release-x.x.x），部署至同一环境（如qa-xxx）</li>
<li>客户端需提前将代码合并至同一分支进行打包</li>
<li>前端应用需将代码部署至同一环境（由于代码合并是自动完成，暂不做同一分支要求）</li>
</ul>
<h2 id="测试流程"><a href="#测试流程" class="headerlink" title="测试流程"></a>测试流程</h2><ul>
<li>QA需在测试首日完成冒烟相关案例的执行，冒烟不通过的任务单于开发确认后提测打回</li>
<li>测试过程对所有问题进行记录，包含：服务端发布导致的问题、客户端崩溃问题、回归过程出现的问题</li>
<li>针对大型需求需组织相关bugbash</li>
<li>服务端发布日需执行回归CI，前端发布完成后，协同策划对此次迭代的需求进行线上走查</li>
<li>客户端发布日进行P0级别的用例回归，配合观察线上崩溃数据</li>
</ul>
<h2 id="发布流程"><a href="#发布流程" class="headerlink" title="发布流程"></a>发布流程</h2><p>发布顺序依次为：服务端 -&gt; 前端 -&gt; 客户端，具体顺序视需求而定（例：部分前端需求需等客户端版本覆盖率上来后再进行发布）</p>
<ul>
<li><p>服务端：</p>
<ul>
<li>发布日前梳理应用依赖关系，整理发布顺序</li>
<li>前置走建表申请，添加线上配置项</li>
<li>将发布应用统一部署至回归环境，执行回归、预发CI</li>
<li>CI通过后QA提交版本测试报告，当日16:00前走完发布审批流程</li>
<li>发布过程需观察各应用抖动情况，以防出现问题及时回滚</li>
</ul>
</li>
<li><p>前端：</p>
<ul>
<li>服务端发布完成后，前端进行线上发布流程</li>
<li>发布完成后通知QA、策划进行线上走查</li>
</ul>
</li>
<li><p>Android端：</p>
<ul>
<li>QA打release包进行回归测试，无问题后修改VersionCode打发布包</li>
<li>开发对发布包进行checklist回归（开发侧自定）</li>
<li>开发在线上–客户端配置中心完善线上配置项</li>
<li>QA发版负责人进行overmind官网发布流程（更新标题&amp;文案需策划提供）</li>
<li>待灰度过程结束，观察Corona、云捕、舆情数据决定是否替换包</li>
<li>官网包稳定后通知策划+市场同学提审，并同步更改相应提审开关</li>
</ul>
</li>
<li><p>iOS端：</p>
<ul>
<li>QA打TF行回归测试</li>
<li>开发对TF包进行checklist回归（开发侧自定）</li>
<li>开发在线上–客户端配置中心完善线上配置项</li>
<li>iOS发版负责人进行TF包提审（更新标题&amp;文案需策划提供）</li>
<li>待灰度过程结束，观察Corona、Firebase、舆情崩溃数据决定是否替换包</li>
</ul>
</li>
</ul>
<hr>
<h1 id="非常规事项"><a href="#非常规事项" class="headerlink" title="非常规事项"></a>非常规事项</h1><h2 id="需求变更"><a href="#需求变更" class="headerlink" title="需求变更"></a>需求变更</h2><ul>
<li>需求变更策划应同步至开发&amp;QA侧，变动在需求稿文档同步</li>
<li>PM评估迭代影响，是否排入视情况而定</li>
</ul>
<h2 id="需求插入"><a href="#需求插入" class="headerlink" title="需求插入"></a>需求插入</h2><ul>
<li>对于插入需求，策划应同步至开发&amp;QA侧</li>
<li>PM评估迭代影响，能否排入视情况而定</li>
</ul>
<h2 id="需求自测"><a href="#需求自测" class="headerlink" title="需求自测"></a>需求自测</h2><ul>
<li>提测前QA给出相应用例，开发发布前应执行完成</li>
<li>发布完成后需协同策划完成线上走查<br><code>开发自行承担的需求未及时同步QA需走自测流程or接受延期发布</code></li>
</ul>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title>面试积累</title>
    <url>/2020/%E9%9D%A2%E8%AF%95%E7%A7%AF%E7%B4%AF/</url>
    <content><![CDATA[<h1 id="面试考查点积累"><a href="#面试考查点积累" class="headerlink" title="面试考查点积累"></a>面试考查点积累</h1><pre><code>一开始接触了很多小公司，攒了一周的面经，从中也get到了很多忘记、丢失的技能点。</code></pre><a id="more"></a>    
<p><a href="https://imgchr.com/i/dMkR2R" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/18/dMkR2R.md.png" alt="dMkR2R.md.png"></a></p>
<hr>
<h1 id="常规面试题"><a href="#常规面试题" class="headerlink" title="常规面试题"></a>常规面试题</h1><p><a href="https://imgchr.com/i/dMka2n" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/18/dMka2n.md.jpg" alt="dMka2n.md.jpg"></a></p>
<hr>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title>埋点自动化</title>
    <url>/2022/%E5%9F%8B%E7%82%B9%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
    <content><![CDATA[<p><code>背景：客户端埋点上报功能一旦出现问题，发布上线后会影响数据统计、市场投放等。因此在客户端发布pipeline中加入自动化步骤，用以验证该功能点，避免因小失大。</code></p>
<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p><strong>通过埋点源数据接口拉取埋点日志，再进行数据提取+校验</strong></p>
<ul>
<li>接口入参：<ul>
<li>resource – 需要查询的业务线</li>
<li>userid – 用户userid</li>
<li>begin – 开始时间点（时间戳精确到秒）</li>
<li>end – 结束时间点（时间戳精确到秒）</li>
<li>os – 终端类型</li>
<li>page_size – 每页查询的数据量</li>
<li>page_num – 查询的页数</li>
<li>method – 固定为GET</li>
</ul>
</li>
</ul>
<h1 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h1><p><strong>数据获取</strong></p>
<ul>
<li>CI命令行运行变量为os、action，以传入python脚本中作为入参<ul>
<li>​os为要校验的终端，可为：Android、iphone</li>
<li>action为要校验的埋点action，可为：activeclient、click…（建议选择强校验点）</li>
<li>数据量为单页10000条，防止数据分页产生数据无法验证</li>
</ul>
</li>
</ul>
<p><strong>结果判断</strong></p>
<ul>
<li>遍历接口返回的所有结果，是否存在action、os同时满足的日志</li>
</ul>
<p><strong>前置依赖</strong></p>
<ul>
<li>该步骤建议放在UI相关pipeline步骤之后，前置自动化用户操作后的埋点信息可共用，无需手动打点</li>
</ul>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
</search>
